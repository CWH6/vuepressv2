import{_ as n,o as a,c as s,e as p}from"./app-A-PqZFtg.js";const t={},e=p(`<h3 id="🪸gateway-服务网关" tabindex="-1"><a class="header-anchor" href="#🪸gateway-服务网关" aria-hidden="true">#</a> 🪸Gateway 服务网关</h3><p><strong>Spring Cloud Gateway</strong> 是 Spring Cloud 提供的全新的服务网关，它基于 Spring 5、Project Reactor 和 Spring Boot 2 技术栈开发，用于处理所有进入应用程序的请求流量。它提供了一种非常灵活、强大且具有响应式编程特性的方式来路由请求、过滤请求以及处理请求。</p><h3 id="🧊spring-cloud-gateway-的主要特点包括" tabindex="-1"><a class="header-anchor" href="#🧊spring-cloud-gateway-的主要特点包括" aria-hidden="true">#</a> 🧊Spring Cloud Gateway 的主要特点包括：</h3><p><strong>基于 WebFlux</strong>：</p><p>Spring Cloud Gateway 是基于 Spring WebFlux 框架构建的，使用了 Reactor 这个响应式编程的库，因此可以处理高并发的请求。</p><p><strong>动态路由</strong>：</p><p>可以通过配置文件、代码或者服务注册中心等方式定义路由规则，实现动态的请求路由，从而根据请求的条件将请求转发到不同的服务或者路径。</p><p><strong>过滤器</strong></p><p>支持多种内置的过滤器，比如添加请求头、添加响应头、请求转发、重定向、限流、权限控制等，同时也支持自定义过滤器来满足特定的业务需求。</p><p><strong>负载均衡</strong>：</p><p>集成了 Spring Cloud Ribbon 和 Spring Cloud LoadBalancer，可以实现对请求的负载均衡，将请求分发到多个实例上</p><p><strong>断路器</strong>：</p><p>可以集成断路器来实现对服务的熔断和降级处理，提高系统的稳定性和可靠性。</p><p><strong>服务发现</strong>：</p><p>支持集成服务注册中心（如 Eureka、Consul 等），可以动态地从注册中心获取服务列表，并实现服务的动态路由。</p><p><strong>集成性</strong>：</p><p>可以与 Spring Cloud 微服务框架无缝集成，与 Spring Boot 应用程序紧密结合，简化了微服务架构中的网关层的开发和部署。</p><h3 id="📦使用-spring-cloud-gateway-的基本步骤" tabindex="-1"><a class="header-anchor" href="#📦使用-spring-cloud-gateway-的基本步骤" aria-hidden="true">#</a> 📦使用 Spring Cloud Gateway 的基本步骤：</h3><p><strong>引入 Spring Cloud Gateway 依赖</strong>：</p><p>在你的项目中引入 Spring Cloud Gateway 的依赖，比如使用 Maven：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>编写路由配置</strong>：</p><p>在配置文件中编写 Spring Cloud Gateway 的路由配置，可以使用 YAML 或者 Properties 格式。例如，下面是一个简单的 YAML 配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> my_route
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//example.com
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/myPath/<span class="token important">**</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个配置定义了一个名为 <code>my_route</code> 的路由规则，将 <code>/myPath/**</code> 的请求转发到 <code>http://example.com</code>。</p><p><strong>自定义过滤器</strong>：</p><p>如果需要，可以编写自定义的过滤器来处理请求。例如，创建一个实现 <code>GlobalFilter</code> 接口的过滤器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GlobalFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Ordered</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerWebExchange</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 自定义过滤器逻辑</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>启动应用程序</strong></p><p>现在可以启动 Spring Boot 应用程序，Spring Cloud Gateway 将会加载配置并开始监听来自客户端的请求。</p><p><strong>访问网关</strong>：</p><p>可以通过配置的路由规则访问 Spring Cloud Gateway，请求会被路由到相应的目标服务上。例如，如果配置了路由规则将 <code>/myPath/**</code> 转发到 <code>http://example.com</code>，那么访问 <code>http://localhost:8080/myPath/</code> 将会被转发到 <code>http://example.com/myPath/</code>。</p><p>总的来说，Spring Cloud Gateway 是一个强大、灵活且具有响应式编程特性的服务网关，可以帮助开发者实现路由、过滤、负载均衡、断路器等功能，实现微服务架构中的请求处理和路由控制。它的配置简单直观，集成了 Spring Cloud 的优秀特性，是构建现代化、高效的微服务系统的重要</p>`,33),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(t,[["render",c],["__file","Gateway.html.vue"]]);export{r as default};
