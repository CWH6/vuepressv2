import{_ as e,r as p,o as t,c as o,a as n,b as i,d as c,e as a}from"./app-HIYjnaWu.js";const l={},r=a(`<h3 id="_1、什么是springboot" tabindex="-1"><a class="header-anchor" href="#_1、什么是springboot" aria-hidden="true">#</a> 1、什么是SpringBoot</h3><p><strong>通过SpringBoot,可以轻松地创建独立的，基于生产级别的Spring的应用程序</strong>，您可以“运行”它们。大 多数Spring Boot应用程序需要最少的Spring配置。</p><h3 id="_2、springboot的特征" tabindex="-1"><a class="header-anchor" href="#_2、springboot的特征" aria-hidden="true">#</a> 2、SpringBoot的特征</h3><ul><li><p>创建独立的Spring应用程序</p></li><li><p>内置Tomcat，Jetty或Undertow（无需部署WAR文件）</p></li><li><p>提供固化的“starter”依赖项，以<strong>简化构建配置</strong></p></li><li><p>让 Spring 框架<strong>和其他第三方库的配置过程变得自动化和简化</strong></p></li><li><p>提供可用于生产的功能，例如<strong>指标，运行状况检查和外部化配置</strong></p></li><li><p>不需要XML配置</p></li></ul><h3 id="_3、如何快速构建一个springboot项目" tabindex="-1"><a class="header-anchor" href="#_3、如何快速构建一个springboot项目" aria-hidden="true">#</a> 3、如何快速构建一个SpringBoot项目？</h3><ul><li><p>通过Web界面使用。http://start.spring.io</p></li><li><p>通过Spring Tool Suite使用。</p></li><li><p>通过IntelliJ IDEA使用。</p></li><li><p>使用Spring Boot CLI使用。</p></li></ul><h3 id="_4、springboot启动类注解-它是由哪些注解组成" tabindex="-1"><a class="header-anchor" href="#_4、springboot启动类注解-它是由哪些注解组成" aria-hidden="true">#</a> 4、SpringBoot启动类注解?它是由哪些注解组成？</h3><p><strong>@SpringBootApplication</strong>， 有如下注解组成：</p><ul><li><p>@SpringBootConfiguration:组合了 @Configuration 注解，实现配置文件的功能。</p></li><li><p>@EnableAutoConfiguration: 打开自动配置的功能，也可以关闭某个自动配置的选项</p></li><li><p>@SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })</p></li><li><p>@ComponentScan:Spring组件扫描</p></li></ul><h3 id="_5、什么是yaml" tabindex="-1"><a class="header-anchor" href="#_5、什么是yaml" aria-hidden="true">#</a> 5、什么是yaml</h3><p>yaml/yml 是一个可读性高，用来表达数据序列化的格式, YAML参考了其他多种语言，</p><p>包括：C语言、Python、Perl。更具有结构性。</p><h3 id="_6、springboot支持配置文件的格式" tabindex="-1"><a class="header-anchor" href="#_6、springboot支持配置文件的格式" aria-hidden="true">#</a> 6、SpringBoot支持配置文件的格式</h3><p>1、properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">java.xiaokaxiu.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">xiaoka</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">java</span><span class="token punctuation">:</span>
  <span class="token key atrule">xiaokkaxiu</span><span class="token punctuation">:</span>
     name<span class="token punctuation">:</span>xiaoka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、springboot启动方式" tabindex="-1"><a class="header-anchor" href="#_7、springboot启动方式" aria-hidden="true">#</a> 7、SpringBoot启动方式？</h3><ol><li>main方法</li><li>命令行 java -jar 的方式</li><li>mvn/gradle</li></ol><h3 id="_8-springboot需要独立的容器运行" tabindex="-1"><a class="header-anchor" href="#_8-springboot需要独立的容器运行" aria-hidden="true">#</a> 8. SpringBoot需要独立的容器运行？</h3><p>不需要，内置了 Tomcat/Jetty。</p><h3 id="_9、-springboot配置途径" tabindex="-1"><a class="header-anchor" href="#_9、-springboot配置途径" aria-hidden="true">#</a> 9、 SpringBoot配置途径？</h3><p>Spring Boot 提供了多种配置途径，它们按照优先级排序如下：</p><p>1、<strong>命令行参数</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 可以在启动应用程序时使用命令行参数传递配置，例如：</span>
<span class="token function">java</span> <span class="token parameter variable">-jar</span> your-application.jar <span class="token parameter variable">--spring.profiles.active</span><span class="token operator">=</span>dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2 、<strong>java:comp/env里的JNDI属性</strong></p><p>如果应用程序运行在 J2EE 容器中，并且使用了 JNDI 属性，可以从这里获取配置信息。</p><p>3、<strong>JVM 系统属性</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 可以在启动 JVM 时通过 \`-D\` 参数设置系统属性，例如：</span>
<span class="token function">java</span> <span class="token parameter variable">-Djava.xiaokaxiu.name</span><span class="token operator">=</span>xiaoka <span class="token parameter variable">-jar</span> your-application.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>4、<strong>操作系统环境变量</strong>：</p><p>从操作系统的环境变量中获取配置信息。</p><p>5、<strong>随机生成的带 <code>random.\\*</code> 前缀的属性</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Spring Boot 可以生成随机值作为配置属性，可以在其他属性中引用，例如 \${random.long}。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6、<strong>应用程序以外的 <code>application.properties</code> 或 <code>application.yml</code> 文件</strong></p><p>可以在外部的配置文件中设置应用程序的配置，例如 <code>/config</code> 目录下的 <code>application.properties</code>。</p><p>7、<strong>打包在应用程序内的 <code>application.properties</code> 或 <code>application.yml</code> 文件</strong>：</p><p>如果应用程序被打包成 JAR 或 WAR 文件，可以在内部的 <code>META-INF</code> 目录下的 <code>application.properties</code> 中设置配置信息。</p><p>8、<strong>通过 <code>@PropertySource</code> 标注的属性源</strong>：</p><p>可以使用 <code>@PropertySource</code> 注解指定额外的属性文件，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:custom.properties&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>9、<strong>默认属性</strong></p><p>Spring Boot 提供了一些默认的属性，用于配置应用程序的默认行为。如果没有在上述地方设置相应的属性，则会使用这些默认属性。</p><p>这个列表按照优先级排序，也就是说，任何在高优先级属性源里设置的属性都会覆盖低优先级的相 同属性。</p><h3 id="_10、-application-properties和application-yml文件可放位置-优先级" tabindex="-1"><a class="header-anchor" href="#_10、-application-properties和application-yml文件可放位置-优先级" aria-hidden="true">#</a> 10、 application.properties和application.yml文件可放位置?优先级?</h3><p>1、<strong>外置，在相对于应用程序运行目录的/config子目录里</strong>。</p><p>这意味着你可以将 <code>application.properties</code> 或 <code>application.yml</code> 文件放置在应用程序运行目录的 <code>/config</code> 子目录中。例如，如果你的应用程序在 <code>/app</code> 目录下运行，则配置文件应该放置在 <code>/app/config</code> 目录中。</p><p>2、<strong>外置，在应用程序运行的目录里</strong>。</p><p>如果不使用 <code>/config</code> 子目录，你也可以将配置文件直接放置在应用程序运行的目录中，例如 <code>/app</code> 目录下。</p><p>3、<strong>内置，在config包内</strong></p><p>将配置文件放置在应用程序的源代码中的 <code>config</code> 包内。这意味着你的配置文件会作为源代码的一部分，打包进最终的应用程序。</p><p>4、<strong>内置，在Classpath根目录</strong></p><p>将配置文件放置在应用程序的 Classpath（类路径）根目录下。这些配置文件将与编译后的代码一起打包到最终的应用程序中。</p><p>上面的优先级顺序 从高到低</p><p>因此，如果在 <code>/config</code> 子目录和应用程序运行目录下都有相同的配置文件，则优先使用 <code>/config</code> 子目录下的配置文件。如果 <code>/config</code> 子目录下没有找到配置文件，则使用应用程序运行目录下的配置文件，依此类推。</p><p>我们可以自己指定文件的位置来加载配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Spring Boot 应用程序去加载指定位置的配置文件 /home/application.yml</span>
<span class="token comment"># --spring.config.location 参数可以让你通过命令行的方式指定 Spring Boot 应用程序加载的配置文件的位置和名称</span>
<span class="token function">java</span> <span class="token parameter variable">-jar</span> xiaoka.jar <span class="token parameter variable">--spring.config.location</span><span class="token operator">=</span>/home/application.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11、springboot自动配置原理" tabindex="-1"><a class="header-anchor" href="#_11、springboot自动配置原理" aria-hidden="true">#</a> 11、SpringBoot自动配置原理?</h3><p>Spring Boot的自动配置原理是通过 <code>@EnableAutoConfiguration</code> 注解来实现的。这个注解会引入 <code>AutoConfigurationImportSelector</code> 类，它的作用是扫描所有存在于 <code>META-INF/spring.factories</code> 文件中的 jar 包。</p><p>在 <code>spring.factories</code> 文件中，通过 <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code> 键来指定需要自动配置的类。Spring Boot 在启动时会扫描这些类，并根据需要自动配置应用程序所需的各种组件和功能。</p><h3 id="_12、-springboot热部署方式" tabindex="-1"><a class="header-anchor" href="#_12、-springboot热部署方式" aria-hidden="true">#</a> 12、 SpringBoot热部署方式</h3><ul><li><p>spring-boot-devtools</p></li><li><p>Spring Loaded</p></li><li><p>Jrebel</p></li><li><p>模版热部署</p></li></ul><h3 id="_13、「bootstrap-yml」-和「application-yml」" tabindex="-1"><a class="header-anchor" href="#_13、「bootstrap-yml」-和「application-yml」" aria-hidden="true">#</a> 13、「bootstrap.yml」 和「application.yml」?</h3><p>bootstrap.yml 优先于application.yml</p><h3 id="_14、springboot如何修改端口号" tabindex="-1"><a class="header-anchor" href="#_14、springboot如何修改端口号" aria-hidden="true">#</a> 14、SpringBoot如何修改端口号?</h3><p>yml:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span> <span class="token punctuation">:</span>
  <span class="token key atrule">port</span> <span class="token punctuation">:</span> <span class="token number">8888</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>properties:</p><div class="language-pro line-numbers-mode" data-ext="pro"><pre class="language-pro"><code>server.port=8888
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令1：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java <span class="token operator">-</span>jar xiaoka<span class="token punctuation">.</span>jar ——— server<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8888</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令2:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java <span class="token operator">-</span> <span class="token class-name">Dserver</span><span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8888</span> <span class="token operator">-</span>jar xiaoka<span class="token punctuation">.</span>jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_15、开启springboot特性的几种方式" tabindex="-1"><a class="header-anchor" href="#_15、开启springboot特性的几种方式" aria-hidden="true">#</a> 15、开启SpringBoot特性的几种方式</h3><ol><li><p>继承spring-boot-starter-parent项目</p></li><li><p>导入spring-boot-dependencies项目依赖</p></li></ol><h3 id="_16-springboot如何兼容spring项目" tabindex="-1"><a class="header-anchor" href="#_16-springboot如何兼容spring项目" aria-hidden="true">#</a> 16. SpringBoot如何兼容Spring项目?</h3><p>在启动类加:</p><p>@ImportResource(locations = {&quot;classpath:spring.xml&quot;})</p><h3 id="_17、-springboot配置监控" tabindex="-1"><a class="header-anchor" href="#_17、-springboot配置监控" aria-hidden="true">#</a> 17、 SpringBoot配置监控</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方式</p><table><thead><tr><th>HTTP 方法</th><th>路径</th><th>描述</th><th>需要认证</th></tr></thead><tbody><tr><td>GET</td><td>/actuator/autoconfig</td><td>查看自动配置的使用情况</td><td>是</td></tr><tr><td>GET</td><td>/actuator/configprops</td><td>查看配置属性，包括默认配置</td><td>是</td></tr><tr><td>GET</td><td>/actuator/beans</td><td>查看 bean 及其关系列表</td><td>是</td></tr><tr><td>GET</td><td>/actuator/dump</td><td>打印线程栈</td><td>是</td></tr><tr><td>GET</td><td>/actuator/env</td><td>查看所有环境变量</td><td>是</td></tr><tr><td>GET</td><td>/actuator/env/{name}</td><td>查看具体变量值</td><td>是</td></tr><tr><td>GET</td><td>/actuator/health</td><td>查看应用健康指标</td><td>否</td></tr></tbody></table>`,81),d={href:"https://www.jianshu.com/p/d57dc9f2e0d9",target:"_blank",rel:"noopener noreferrer"},u=a(`<h3 id="_18-actuator获得bean装配报告信息访问哪个端点" tabindex="-1"><a class="header-anchor" href="#_18-actuator获得bean装配报告信息访问哪个端点" aria-hidden="true">#</a> 18. actuator获得Bean装配报告信息访问哪个端点？</h3><p>/beans 端点</p><h3 id="_19、actuator关闭应用程序访问哪个端点" tabindex="-1"><a class="header-anchor" href="#_19、actuator关闭应用程序访问哪个端点" aria-hidden="true">#</a> 19、actuator关闭应用程序访问哪个端点</h3><p>/shutdown</p><p>该端点默认是关闭的，如果开启，需要如下设置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
  <span class="token key atrule">shutdown</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20、actuator查看发布应用信息访问哪个端点" tabindex="-1"><a class="header-anchor" href="#_20、actuator查看发布应用信息访问哪个端点" aria-hidden="true">#</a> 20、actuator查看发布应用信息访问哪个端点?</h3><p>/info</p><h3 id="_21、针对请求访问的几个组合注解" tabindex="-1"><a class="header-anchor" href="#_21、针对请求访问的几个组合注解" aria-hidden="true">#</a> 21、针对请求访问的几个组合注解？</h3><p>@PatchMapping 根据部分属性更新</p><p>@PostMapping， 创建，根据部分属性更新</p><p>@GetMapping</p><p>@PutMapping 更新已有的资源的全部属性</p><p>@DeleteMapping</p><h3 id="_22、springboot-中的starter" tabindex="-1"><a class="header-anchor" href="#_22、springboot-中的starter" aria-hidden="true">#</a> 22、SpringBoot 中的starter</h3><p>可以理解成对依赖的一种合成，starter会把一个或一套功能相关依赖都包含进来，避免了自己去依赖费事，还有各种包的冲突问题。大大的提升了开发效率。 并且相关配置会有一个默认值，如果我们自己去配置，就会覆盖默认值</p><h3 id="_23、-springboot集成mybatis" tabindex="-1"><a class="header-anchor" href="#_23、-springboot集成mybatis" aria-hidden="true">#</a> 23、 SpringBoot集成Mybatis?</h3><p>mybatis-spring-boot-starter</p><h3 id="_24、-什么是springprofiles" tabindex="-1"><a class="header-anchor" href="#_24、-什么是springprofiles" aria-hidden="true">#</a> 24、 什么是SpringProfiles?</h3><p>一般来说我们从开发到生产，经过开发(dev)、测试（test）、上线(prod)。不同的时刻我们会用不同的 配置。Spring Profiles 允许用户根据配置文件（dev，test，prod 等）来注册 bean。它们可以让我们 自己选择什么时候用什么配置。</p><h3 id="_25、不同的环境的配置文件" tabindex="-1"><a class="header-anchor" href="#_25、不同的环境的配置文件" aria-hidden="true">#</a> 25、不同的环境的配置文件?</h3><p>可以是 application-{profile}.properties/yml ，但默认是启动主配置文件application.properties,一般 来说我们的不同环境配置如下。</p><ul><li><p><code>application.properties</code>：主配置文件</p></li><li><p><code>application-dev.properties</code>：开发环境配置文件</p></li><li><p><code>application-test.properties</code>：测试环境配置文件</p></li><li><p><code>application.prop-properties</code>：生产环境配置文件</p></li></ul><h3 id="_26-如何激活某个环境的配置" tabindex="-1"><a class="header-anchor" href="#_26-如何激活某个环境的配置" aria-hidden="true">#</a> 26. 如何激活某个环境的配置？</h3><p>比如我们激活开发环境。</p><p>yml：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>properties:</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> xiaoka-v1.0.jar ———spring.profiles.active<span class="token operator">=</span>dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_27、编写测试用例的注解" tabindex="-1"><a class="header-anchor" href="#_27、编写测试用例的注解" aria-hidden="true">#</a> 27、编写测试用例的注解？</h3><p>@SpringBootTest</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySpringBootTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MyService</span> myService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 进行测试</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_28、springboot异常处理相关注解" tabindex="-1"><a class="header-anchor" href="#_28、springboot异常处理相关注解" aria-hidden="true">#</a> 28、SpringBoot异常处理相关注解?</h3><p><strong>@ControllerAdvice</strong> : 定义全局的异常处理器</p><p><strong>@ExceptionHandler</strong>: 用于在特定的 Controller 类或者全局异常处理器中处理特定类型的异常</p><p><strong>@ControllerAdvice</strong>：</p><p><code>@ControllerAdvice</code> 注解用于定义全局的异常处理器，可以捕获整个应用程序中的异常，而不是局限于单个 Controller。</p><p><strong>@ExceptionHandler</strong>：</p><p><code>@ExceptionHandler</code> 注解用于在 <code>@Controller</code> 类或者 <code>@ControllerAdvice</code> 类中定义特定类型的异常处理方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;An error occurred: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子展示了一个简单的异常处理方法，当应用程序抛出 Exception 类型的异常时，会调用 <code>handleException</code> 方法，返回一个带有错误信息的 ModelAndView 对象</p><p><strong>在特定的 Controller 中使用 @ExceptionHandler</strong>：</p><p>你也可以在具体的 <code>@Controller</code> 类中使用 <code>@ExceptionHandler</code> 来处理该 Controller 中的异常。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ModelAndView</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/mycontroller&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 此处可能会抛出异常</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;An error occurred: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>handleException</code> 方法将处理 <code>MyController</code> 中抛出的 Exception 类型的异常。一般不会这样写</p><p>在 Spring MVC 应用程序中集中管理异常处理，减少重复代码，并将异常处理与业务逻辑分离开来</p><h3 id="_29-springboot-1-x-和-2-x区别" tabindex="-1"><a class="header-anchor" href="#_29-springboot-1-x-和-2-x区别" aria-hidden="true">#</a> 29. SpringBoot 1.x 和 2.x区别?</h3><ol><li><p>SpringBoot 2基于Spring5和JDK8，Spring 1x用的是低版本。</p></li><li><p>配置变更，参数名等。</p></li><li><p>SpringBoot2相关的插件最低版本很多都比原来高</p></li><li><p>2.x配置中的中文可以直接读取，不用转码</p></li><li><p>Actuator的变化</p></li><li><p>CacheManager 的变化</p></li></ol><h3 id="_30-springboot读取配置相关注解有" tabindex="-1"><a class="header-anchor" href="#_30-springboot读取配置相关注解有" aria-hidden="true">#</a> 30. SpringBoot读取配置相关注解有？</h3><ul><li><p>@PropertySource</p></li><li><p>@Value</p></li><li><p>@Environment</p></li><li><p>@ConfigurationProperties</p></li></ul><p><strong>@PropertySource</strong></p><p><code>@PropertySource</code> 注解用于指定一个或多个属性源文件，从中加载属性值到 Spring 的环境中。它通常与 <code>@Configuration</code> 类一起使用，以将外部属性文件中的属性加载到 Spring 应用程序的环境中。</p><p>以下是使用 <code>@PropertySource</code> 注解的基本用法示例：</p><p><strong>在 <code>@Configuration</code> 类中使用 <code>@PropertySource</code></strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PropertySource</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:application.properties&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置类的其他内容</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们创建了一个名为 <code>AppConfig</code> 的配置类，并使用 <code>@PropertySource</code> 注解指定了一个名为 <code>application.properties</code> 的属性源文件。这意味着 Spring 将从 classpath 中的 <code>application.properties</code> 文件中加载属性值。</p><p><strong>@Value</strong></p><p><code>@Value</code> 注解用于从 Spring 的环境中获取属性值，并注入到 Java 类中的字段、方法参数或构造函数参数中。它可以注入简单的属性值，也可以注入复杂的表达式和 SpEL 表达式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${myapp.name}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> appName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${myapp.version}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> appVersion<span class="token punctuation">;</span>

    <span class="token comment">// 可以使用这些属性值进行其他操作</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>@Environment</strong></p><p><code>@Environment</code> 注解是 Spring Boot 中的一个注解，用于注入 Spring 的环境变量。它提供了一种方便的方式来获取应用程序的配置信息、系统属性、命令行参数等，并在 Spring Bean 中使用。</p><p><strong>在字段中注入环境变量</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span></span><span class="token class-name">Environment</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> appName <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;myapp.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> appVersion <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;myapp.version&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 使用环境变量进行其他操作</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>@ConfigurationProperties</strong></p><p><code>@ConfigurationProperties</code> 是 Spring Boot 中用来绑定配置属性的注解。通过这个注解，你可以将外部的配置文件或者环境变量映射到一个 Java Bean 中，方便地在应用程序中使用这些配置。</p><p><strong>定义配置类</strong>：</p><p>首先，你需要定义一个 Java 类作为配置类，并使用 <code>@ConfigurationProperties</code> 注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;myapp&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAppProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> version<span class="token punctuation">;</span>

    <span class="token comment">// 省略 getter 和 setter 方法</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> version<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token class-name">String</span> version<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>version <span class="token operator">=</span> version<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,70);function k(v,m){const s=p("ExternalLinkIcon");return t(),o("div",null,[r,n("blockquote",null,[n("p",null,[n("a",d,[i("参考"),c(s)])])]),u])}const b=e(l,[["render",k],["__file","springboot.html.vue"]]);export{b as default};
