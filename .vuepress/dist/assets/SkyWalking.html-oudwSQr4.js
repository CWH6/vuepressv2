import{_ as s,r as t,o as e,c as p,a as n,b as o,d as l,e as c}from"./app-_OZj9BKu.js";const i={},r=c(`<h3 id="🪸skywalking-链路追踪" tabindex="-1"><a class="header-anchor" href="#🪸skywalking-链路追踪" aria-hidden="true">#</a> 🪸SkyWalking 链路追踪</h3><p><strong>Apache SkyWalking</strong> 是一个开源的分布式系统性能监控工具，主要用于追踪、诊断和监控分布式系统的性能和运行状态。它提供了全面的链路追踪功能，可以跟踪分布式系统中的每个请求，并提供详细的性能指标和调用链信息，帮助开发者快速定位和解决性能问题。</p><h3 id="🧊skywalking-的主要特点和功能包括" tabindex="-1"><a class="header-anchor" href="#🧊skywalking-的主要特点和功能包括" aria-hidden="true">#</a> 🧊SkyWalking 的主要特点和功能包括：</h3><p><strong>分布式链路追踪</strong>：</p><p>SkyWalking 支持对分布式系统中的请求进行端到端的链路追踪，从客户端到服务端的每一层调用都会被记录和追踪。</p><p><strong>性能指标监控</strong>：</p><p>可以监控系统的关键性能指标，比如请求响应时间、吞吐量、错误率等，帮助开发者了解系统的运行状态。</p><p><strong>服务拓扑图</strong>：</p><p>提供实时的服务拓扑图，展示了系统中各个服务之间的调用关系和依赖关系，帮助开发者理清系统架构。</p><p><strong>分布式跟踪报告</strong>：</p><p>生成详细的分布式跟踪报告，展示了每个请求的调用链路、耗时、调用次数等信息，帮助开发者定位性能瓶颈。</p><p><strong>自动化依赖检测</strong>：</p><p>自动检测和识别系统中的各种依赖关系，包括数据库、消息队列、RPC 调用等，使得监控配置更加简单和方便。</p><p><strong>多语言支持</strong>：</p><p>支持多种常用编程语言和框架，比如 Java、Python、Node.js、Go 等，可以适应不同技术栈的应用系统</p><p><strong>灵活的插件机制</strong>：</p><p>提供丰富的插件和扩展机制，可以根据需要自定义监控和追踪策略，满足不同场景下的监控需求。</p><h3 id="📦使用-skywalking-的基本步骤" tabindex="-1"><a class="header-anchor" href="#📦使用-skywalking-的基本步骤" aria-hidden="true">#</a> 📦使用 SkyWalking 的基本步骤：</h3><p><strong>部署 SkyWalking 服务端</strong></p><p>首先需要部署 SkyWalking 的服务端，可以选择使用 Docker 镜像部署，也可以下载安装包手动部署。具体部署步骤可以参考 SkyWalking 的官方文档。</p><p><strong>配置应用程序</strong>：</p><p>在需要监控的应用程序中引入 SkyWalking 的客户端依赖，例如使用 Maven：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.skywalking<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>apm-toolkit-trace<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${skywalking.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后根据具体的应用框架，进行配置，比如在 Spring Boot 应用中，需要添加 SkyWalking 的配置信息到 <code>application.properties</code> 或 <code>application.yaml</code> 文件中：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">skywalking</span><span class="token punctuation">:</span>
  <span class="token key atrule">agent</span><span class="token punctuation">:</span>
    <span class="token key atrule">service_name</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>service<span class="token punctuation">-</span>name
    <span class="token key atrule">collector</span><span class="token punctuation">:</span>
      <span class="token key atrule">grpc</span><span class="token punctuation">:</span>
        <span class="token key atrule">server_address</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>skywalking<span class="token punctuation">-</span>collector<span class="token punctuation">:</span><span class="token number">11800</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>your-service-name</code> 是你的应用程序的名称，<code>your-skywalking-collector:11800</code> 是 SkyWalking Collector 的地址和端口。</p><p><strong>启动应用程序</strong>：</p><p>启动应用程序后，SkyWalking 将会自动收集和监控应用程序的性能数据，并发送到 SkyWalking 服务端进行处理和展示。</p><p><strong>访问 SkyWalking 控制台</strong>：</p><p>打开浏览器，访问 SkyWalking 的 Web 控制台地址（默认为 <code>http://your-skywalking-server:8080</code>），可以查看实时的性能监控数据、服务拓扑图、链路追踪信息等。</p><p><strong>查看性能指标</strong>：</p><p>在 SkyWalking 控制台中，可以查看各个服务的响应时间、调用次数、错误率等性能指标，帮助开发者了解系统的运行情况。</p><p>总的来说，SkyWalking 是一个强大的分布式系统性能监控工具，提供了全面的链路追踪、性能指标监控、服务拓扑图等功能，帮助开发者快速定位和解决分布式系统中的性能问题，提高系统的稳定性和可靠性。</p>`,33),k={href:"https://blog.csdn.net/m0_73467713/article/details/131073840",target:"_blank",rel:"noopener noreferrer"};function u(g,d){const a=t("ExternalLinkIcon");return e(),p("div",null,[r,n("blockquote",null,[n("p",null,[n("a",k,[o("参考1"),l(a)])])])])}const v=s(i,[["render",u],["__file","SkyWalking.html.vue"]]);export{v as default};
