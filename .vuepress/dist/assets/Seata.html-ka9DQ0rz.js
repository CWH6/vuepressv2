import{_ as a,o as n,c as s,e as t}from"./app-pVQ1Hrls.js";const e={},p=t(`<h3 id="🪸seata分布式事务" tabindex="-1"><a class="header-anchor" href="#🪸seata分布式事务" aria-hidden="true">#</a> 🪸Seata分布式事务</h3><p><strong>Seata</strong>（原名 Fescar）是阿里巴巴开源的一款分布式事务解决方案，用于解决分布式环境下的事务一致性问题。它提供了分布式事务的基本功能，包括分布式事务管理、事务状态协调、事务日志存储和事务恢复等功能，帮助开发者简化了在分布式系统中实现分布式事务的复杂性。</p><h3 id="🧊seata-主要包含以下三个核心模块" tabindex="-1"><a class="header-anchor" href="#🧊seata-主要包含以下三个核心模块" aria-hidden="true">#</a> 🧊Seata 主要包含以下三个核心模块：</h3><p><strong>Transaction Coordinator（TC）</strong>：</p><p>事务协调器，负责全局事务的创建、提交和回滚。当一个分布式事务发起时，TC 协调各个参与者（分支事务）的提交和回滚操作，以保证全局事务的一致性。</p><p><strong>Transaction Manager（TM）</strong>：</p><p>事务管理器，负责管理全局事务的生命周期，包括事务的开始、提交和回滚等。在分布式事务发起方，即业务发起方的服务中，需要部署 TM 来管理全局事务。</p><p><strong>Resource Manager（RM）</strong>：</p><p>资源管理器，负责管理分支事务的生命周期，包括分支事务的注册、状态汇报、提交和回滚等。在分布式事务的参与方，即涉及到数据库或其他资源操作的服务中，需要部署 RM。</p><h4 id="seata-的工作流程如下" tabindex="-1"><a class="header-anchor" href="#seata-的工作流程如下" aria-hidden="true">#</a> Seata 的工作流程如下：</h4><p><strong>全局事务发起</strong>：</p><p>当业务服务发起一个分布式事务时，TM 将会创建一个全局事务，并生成一个全局事务 ID（Global Transaction ID）。</p><p><strong>全局事务开始</strong>：</p><p>TM 发送一个全局事务开始的请求到 TC，TC 接收到请求后创建一个全局事务上下文，并向各个 RM 注册分支事务。</p><p><strong>分支事务注册</strong>：</p><p>每个 RM 接收到 TC 的注册请求后，在本地生成一个分支事务，并将分支事务的 ID 和全局事务 ID 返回给 TC。</p><p><strong>业务处理</strong>：</p><p>在业务处理过程中，各个 RM 分支事务执行相应的本地事务操作。</p><p><strong>全局事务提交</strong></p><p>当业务处理完成后，TM 发送全局事务提交的请求到 TC，TC 收到请求后，向各个 RM 发送提交事务的指令。</p><p><strong>分支事务提交</strong>：</p><p>各个 RM 接收到提交指令后，执行本地事务的提交操作，并向 TC 汇报提交状态。</p><p><strong>全局事务结束</strong>：</p><p>当所有分支事务都成功提交后，TC 发送全局事务提交成功的响应给 TM，此时全局事务结束。如果有任何一个分支事务提交失败，TC 将会发送回滚指令给各个 RM，触发全局事务的回滚操作。</p><h3 id="📦使用-seata-的基本步骤" tabindex="-1"><a class="header-anchor" href="#📦使用-seata-的基本步骤" aria-hidden="true">#</a> 📦使用 Seata 的基本步骤：</h3><p><strong>引入 Seata 依赖</strong>：</p><p>首先，在你的项目中引入 Seata 的依赖，比如使用 Maven：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置 Seata Server</strong>：</p><p>在项目中配置 Seata Server 的地址和端口，可以通过 <code>registry.conf</code> 和 <code>file.conf</code> 进行配置。在 <code>file.conf</code> 中配置数据源和事务日志存储路径等信息。</p><p><strong>配置 Seata DataSourceProxy</strong>：</p><p>在业务服务的数据源上配置 Seata 的 DataSourceProxy，用于替换原始的数据源。可以使用 <code>@GlobalTransactional</code> 注解来标记一个分布式事务的开始点。</p><p><strong>编写业务代码</strong>：</p><p>在业务代码中，使用 <code>@GlobalTransactional</code> 注解来标记一个分布式事务的开始点，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">BusinessDao</span> businessDao<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GlobalTransactional</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleBusiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 业务逻辑</span>
        businessDao<span class="token punctuation">.</span><span class="token function">insertData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        businessDao<span class="token punctuation">.</span><span class="token function">insertData2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>handleBusiness</code> 方法中，使用了 <code>@GlobalTransactional</code> 注解来标记一个分布式事务的开始点，当方法执行时，Seata 将会创建一个全局事务。</p><p><strong>启动 Seata Server</strong>：</p><p>在服务器上启动 Seata Server，可以使用以下命令：</p><div class="language-ba line-numbers-mode" data-ext="ba"><pre class="language-ba"><code>sh seata-server.sh -p 8091 -m file
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的 <code>-p 8091</code> 指定了 Seata Server 的端口号，<code>-m file</code> 表示使用文件模式进行配置。</p><p><strong>监控和管理</strong>：</p><p>可以通过 Seata 提供的控制台界面进行全局事务的监控和管理，查看事务的执行情况、事务状态、异常信息等。</p><p>总的来说，Seata 是一个功能强大的分布式事务解决方案，可以帮助开发者在分布式系统中实现事务的一致性和可靠性。通过与 Spring Boot 等框架集成，开发者可以方便地使用 Seata 来管理分布式事务，保证系统在高并发和异常情况下的稳定运行。</p>`,43),o=[p];function c(i,l){return n(),s("div",null,o)}const d=a(e,[["render",c],["__file","Seata.html.vue"]]);export{d as default};
