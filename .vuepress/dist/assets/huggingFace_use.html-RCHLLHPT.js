import{_ as p,r as o,o as i,c,a as n,b as s,d as e,e as t}from"./app-_OZj9BKu.js";const l={},u=n("h2",{id:"🤖-模型库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🤖-模型库","aria-hidden":"true"},"#"),s(" 🤖 模型库")],-1),r={href:"https://huggingface.co/models",target:"_blank",rel:"noopener noreferrer"},d={href:"https://huggingface.co/chat",target:"_blank",rel:"noopener noreferrer"},k=t(`<img src="https://cwh6-bucket.oss-cn-shanghai.aliyuncs.com/bk/image-20240115212859166.png" style="zoom:50%;"><h2 id="🚀-快速使用" tabindex="-1"><a class="header-anchor" href="#🚀-快速使用" aria-hidden="true">#</a> 🚀 快速使用</h2><h3 id="_1、安装-hugging-face" tabindex="-1"><a class="header-anchor" href="#_1、安装-hugging-face" aria-hidden="true">#</a> 1、安装 Hugging Face</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> transformers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、安装-pytorch" tabindex="-1"><a class="header-anchor" href="#_2、安装-pytorch" aria-hidden="true">#</a> 2、安装 PyTorch</h3><p><strong>PyTorch（torch）：</strong> 是一个开源的机器学习库，广泛用于深度学习任务。它提供了张量运算和神经网络的支持，是构建深度学习模型的强大工具。</p><p><strong>torchaudio：</strong> 是 PyTorch 的一个附加库，专注于音频处理任务。它提供了处理音频数据的工具和函数，方便在 PyTorch 中进行声音相关的深度学习任务。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> torch  torchaudio
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),h={id:"_3、浏览-hugging-face-的-模型库",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#_3、浏览-hugging-face-的-模型库","aria-hidden":"true"},"#",-1),m={href:"https://huggingface.co/models",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>找到适合你项目需求的模型。</p><p>可以通过搜索或筛选来缩小范围。</p><p>点击模型名称进入模型主页，可以查看模型的详细信息、用法示例、源代码等</p><p>比如：我们选择模型 <code>distilbert-base-uncased-finetuned-sst-2-english </code>，该模型能判断文本的情绪</p><p><img src="https://cwh6-bucket.oss-cn-shanghai.aliyuncs.com/bk/image-20240115214344842.png" alt=""></p><h3 id="_4、下载并使用模型" tabindex="-1"><a class="header-anchor" href="#_4、下载并使用模型" aria-hidden="true">#</a> 4、下载并使用模型</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用 from transformers import MODEL_NAME 导入模型。</span>
<span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipeline<span class="token punctuation">,</span> AutoTokenizer

<span class="token comment"># 加载分词器：</span>
tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">&quot;bert-base-uncased&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 加载文本分类模型：</span>
model <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">&quot;text-classification&quot;</span><span class="token punctuation">,</span> model<span class="token operator">=</span><span class="token string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 处理输入文本并进行推断</span>
text <span class="token operator">=</span> <span class="token string">&quot;今天天气不错！&quot;</span>
<span class="token comment"># text = &quot;this movie is really bad!&quot;</span>
outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>text<span class="token punctuation">)</span>

<span class="token comment"># 打印结果：</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Input text: </span><span class="token interpolation"><span class="token punctuation">{</span>text<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Predicted label: </span><span class="token interpolation"><span class="token punctuation">{</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">, score: </span><span class="token interpolation"><span class="token punctuation">{</span>outputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 积极的，分数为0.54</span>
Input text: 今天天气不错！
Predicted label: POSITIVE, score: <span class="token number">0.54</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 消极的，分数为1.00</span>
Input text: this movie is really bad<span class="token operator">!</span>
Predicted label: NEGATIVE, score: <span class="token number">1.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、远程调用模块" tabindex="-1"><a class="header-anchor" href="#_5、远程调用模块" aria-hidden="true">#</a> 5、远程调用模块</h3>`,11),b={href:"https://huggingface.co/settings/tokens",target:"_blank",rel:"noopener noreferrer"},_=t(`<p><img src="https://cwh6-bucket.oss-cn-shanghai.aliyuncs.com/bk/image-20240115215027651.png" alt=""></p><p>2、获取远程接口</p><p><img src="https://cwh6-bucket.oss-cn-shanghai.aliyuncs.com/bk/image-20240115215119271.png" alt=""></p><p>选择合适的语言就行</p><img src="https://cwh6-bucket.oss-cn-shanghai.aliyuncs.com/bk/image-20240115215155182.png" style="zoom:50%;"><p>下面采用python</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
API_TOKEN <span class="token operator">=</span> <span class="token string">&quot;your_huggingface_token&quot;</span>
API_URL <span class="token operator">=</span> <span class="token string">&quot;https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english&quot;</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f&quot;Bearer </span><span class="token interpolation"><span class="token punctuation">{</span>API_TOKEN<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">}</span>


<span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>API_URL<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> json<span class="token operator">=</span>payload<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>


output <span class="token operator">=</span> query<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&quot;inputs&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;I like you. I love you&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 积极情绪大于消极情绪</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;label&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;POSITIVE&#39;</span>, <span class="token string">&#39;score&#39;</span><span class="token builtin class-name">:</span> <span class="token number">0.9998738765716553</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token string">&#39;label&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;NEGATIVE&#39;</span>, <span class="token string">&#39;score&#39;</span><span class="token builtin class-name">:</span> <span class="token number">0.00012611268903128803</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function f(y,q){const a=o("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[n("a",r,[s("Hugging Face"),e(a)]),s(" 是一个流行的自然语言处理 (NLP) 模型库和社区，提供了大量预训练模型、工具和资源，使得 NLP 的开发者和研究人员能够快速高效地构建和应用各种文本相关应用。在这里，快速熟悉 Hugging Face 的基本功能，并展示一些简单实用的例子。")]),n("blockquote",null,[n("p",null,[s("huggingFace官方研发了一比肩chatgtp3.5 的 ai"),n("a",d,[s("产品"),e(a)])])]),k,n("h3",h,[g,s(" 3、浏览 Hugging Face 的 "),n("a",m,[s("模型库"),e(a)])]),v,n("p",null,[s("1、申请"),n("a",b,[s("token"),e(a)])]),_])}const I=p(l,[["render",f],["__file","huggingFace_use.html.vue"]]);export{I as default};
